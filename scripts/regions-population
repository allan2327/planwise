#! /bin/bash
set -euo pipefail
export PGPASSWORD=$POSTGRES_PASSWORD;

BIN_PATH=${BIN_PATH:-cpp}
SCRIPT_PATH=${SCRIPT_PATH:-scripts}
DATA_PATH=${DATA_PATH:-data}

function base-raster {
    if   [[ $1 == "kenya" ]];        then echo "KEN_popmap15_v2b.tif"
    elif [[ $1 == "tanzania" ]];     then echo "TZA_popmap15_v2b.tif"
    elif [[ $1 == "ethiopia" ]];     then echo "ETH15v5.tif"
    elif [[ $1 == "nigeria" ]];      then echo "NGA14adjv1.tif"
    elif [[ $1 == "south-africa" ]]; then echo "ZAF15v4.tif"
    else
        echo "Unknown country: $1"
        exit 1
    fi
}

# Creates a raster file data/populations/REGIONID.tif with the population values
# of each REGIONID in the regions table

echo "Precalculating population aggregates per region"
REGIONS="$(psql -d $POSTGRES_DB -U $POSTGRES_USER -h $POSTGRES_HOST -t -A -c 'SELECT id,country FROM regions WHERE total_population IS NULL OR max_population IS NULL OR raster_pixel_area IS NULL;')"
echo " Regions: ${REGIONS}"

mkdir -p ${DATA_PATH}/populations

for region in $REGIONS; do
  ID=`echo $region | cut -d \| -f 1`
  COUNTRY=`echo $region | cut -d \| -f 2`
  RASTER=${DATA_PATH}/`base-raster ${COUNTRY}`

  TARGET=${DATA_PATH}/populations/${ID}.tif

  if [[ ! -e $TARGET || -z `gdalinfo $TARGET | grep -e POPULATION_SUM -e POPULATION_MAX -e PIXEL_AREA_M2` ]]; then
    TMP_FILE=${TARGET}-unscaled

    echo " Warping population for ${ID}"
    gdalwarp -q \
      -co "TILED=YES" -co "BLOCKXSIZE=128" -co "BLOCKYSIZE=128" \
      -crop_to_cutline \
      -cutline PG:"dbname=${POSTGRES_DB} host=${POSTGRES_HOST} user=${POSTGRES_USER} password=${POSTGRES_PASSWORD}" \
      -csql "SELECT the_geom FROM regions WHERE id = ${ID};" \
      $RASTER $TMP_FILE

    echo " Aggregating population for ${ID}"
    IFS=' ' read -a AGGREGATES <<< $(${BIN_PATH}/aggregate-population ${TMP_FILE})
    POPULATION_SUM=${AGGREGATES[0]}
    POPULATION_MAX=${AGGREGATES[1]}

    echo "Calculating pixel area for ${ID}"
    PIXEL_AREA_M2=$(${SCRIPT_PATH}/raster-pixel-size ${TMP_FILE})

    echo " Normalizing raster file scale for ${ID}"
    gdal_translate -ot Byte -scale 0 $POPULATION_MAX 0 255 $TMP_FILE $TARGET

    echo " Storing metadata for ${ID}"
    gdal_edit.py -mo "POPULATION_SUM=$POPULATION_SUM" -mo "POPULATION_MAX=$POPULATION_MAX" -mo "PIXEL_AREA_M2=$PIXEL_AREA_M2" $TARGET

    rm $TMP_FILE
  fi;

  TOTAL_POPULATION=`gdalinfo $TARGET | grep POPULATION_SUM | cut -d = -f2`
  MAX_POPULATION=`gdalinfo $TARGET | grep POPULATION_MAX | cut -d = -f2`
  PIXEL_AREA_M2=`gdalinfo $TARGET | grep PIXEL_AREA_M2 | cut -d = -f2`

  echo " Updating population for ${ID}"
  psql -d $POSTGRES_DB -U $POSTGRES_USER -h $POSTGRES_HOST -t -A \
       -c "UPDATE regions SET total_population = ${TOTAL_POPULATION}, max_population = ${MAX_POPULATION}, raster_pixel_area = ${PIXEL_AREA_M2} WHERE id = ${ID}";
done;
